spring.datasource.url=jdbc:postgresql://localhost:5432/reservation_db
spring.datasource.username=postgres
spring.datasource.password=0000
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.open-in-view=false
spring.sql.init.mode=always
spring.sql.init.continue-on-error=true
server.port=8080

app.security.jwt.secret=MySecureJWTSecretKeyForReservationSystemThatIsAtLeast256BitsLongAndSecure2024!
app.security.jwt.expiration=3600000

# Enable debug logging
logging.level.com.reservation=DEBUG
logging.level.org.springframework.web=DEBUG

# AI Chatbot Configuration (FREE OPTIONS)
# Option 1: Ollama (Recommended - Free Local AI)
ai.service.type=ollama
ollama.api.url=http://localhost:11434
ai.model=llama3.2

# Option 2: OpenAI (Paid - Uncomment if you have API key)
# ai.service.type=openai
# openai.api.key=sk-your-api-key-here

# Option 3: Fallback (Always works - Smart rule-based responses)
# ai.service.type=fallback

# Google Calendar Integration
google.calendar.enabled=false
google.calendar.credentials.json=

# To enable Google Calendar integration:
# 1. Set google.calendar.enabled=true
# 2. Add your Google Service Account JSON credentials in the line above
# 3. Make sure to share your Google Calendar with the service account email
# 
# SECURITY NOTE: Never commit real credentials to Git!
# Use environment variables or external config files for production.

# To set up Google Calendar integration:
# 1. Go to: https://console.cloud.google.com/
# 2. Create a new project or select existing one
# 3. Enable the "Google Calendar API"
# 4. Create credentials (Service Account recommended)
# 5. Download the JSON key file
# 6. Copy the JSON content and paste it as one line in the credentials.json property above
